<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description>Legion 1x40G NIC FPGA Implementation</description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>50</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>50</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.plugins.buildblocker.BuildBlockerProperty plugin="build-blocker-plugin@1.4.1">
      <useBuildBlocker>false</useBuildBlocker>
    </hudson.plugins.buildblocker.BuildBlockerProperty>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>XILINX_PATH</name>
          <description>path to the intended version of Xilinx, example:  /net/storage_cal_ci/general/Development/Hardware/FPGA/Tools/Xilinx/Vivado/2013.4</description>
          <defaultValue>/net/storage_cal_ci/general/Development/Hardware/FPGA/Tools/Xilinx/ISE/14.7/ISE_DS</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>LM_LICENSE_FILE</name>
          <description>FlexLM license server ports, example:  2100@spcsjcapp01.ad.spirentcom.com:1900@hnlcsv.ad.spirentcom.com</description>
          <defaultValue>2100@spcsjcapp01.ad.spirentcom.com:1900@hnlcsv.ad.spirentcom.com</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MAX_CPU_USAGE</name>
          <description>Maximum number of CPUs/cores to use</description>
          <defaultValue>4</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>MAX_TIMING_DELTA</name>
          <description>Value to use as check on post-routing timing summary to determine if timing should be considered as failure</description>
          <defaultValue>0.000</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
  </properties>
  <scm class="hudson.plugins.perforce.PerforceSCM" plugin="perforce@1.3.27">
    <configVersion>1</configVersion>
    <p4User>tableuser</p4User>
    <p4Passwd></p4Passwd>
    <p4Port>perforce.spirentcom.com:1666</p4Port>
    <p4Client>${JOB_NAME}</p4Client>
    <projectPath>+//SPT_HW/legion/sandbox/legion_1x40g/fpga/SourceCode/...  //ws/SourceCode/...

+//SPT_HW/legion/sandbox/legion_1x40g/fpga/Xilinx_Legion_1x40G/... //ws/Xilinx_Legion_1x40G/...

+//SPT_HW/legion/sandbox/bitstream/candidate/nic/legion_40g.bit*  //ws/bitstream/candidate/nic/legion_40g.bit*</projectPath>
    <projectOptions>noallwrite clobber compress unlocked nomodtime rmdir</projectOptions>
    <p4SysDrive></p4SysDrive>
    <p4SysRoot></p4SysRoot>
    <browser class="hudson.plugins.perforce.browsers.P4Web">
      <url>http://jenkins.ad.spirentcom.com:5104/</url>
      <p4WebEndShite>?ac=22</p4WebEndShite>
      <p4DifEndShite>?ac=19</p4DifEndShite>
      <p4ClEndShite>?ac=10</p4ClEndShite>
    </browser>
    <p4Tool>p4</p4Tool>
    <useClientSpec>false</useClientSpec>
    <useStreamDepot>false</useStreamDepot>
    <forceSync>false</forceSync>
    <alwaysForceSync>true</alwaysForceSync>
    <dontUpdateServer>false</dontUpdateServer>
    <disableAutoSync>false</disableAutoSync>
    <disableChangeLogOnly>false</disableChangeLogOnly>
    <disableSyncOnly>false</disableSyncOnly>
    <showIntegChanges>false</showIntegChanges>
    <useOldClientName>false</useOldClientName>
    <createWorkspace>true</createWorkspace>
    <updateView>true</updateView>
    <dontRenameClient>false</dontRenameClient>
    <updateCounterValue>false</updateCounterValue>
    <dontUpdateClient>false</dontUpdateClient>
    <exposeP4Passwd>false</exposeP4Passwd>
    <wipeBeforeBuild>true</wipeBeforeBuild>
    <quickCleanBeforeBuild>false</quickCleanBeforeBuild>
    <restoreChangedDeletedFiles>false</restoreChangedDeletedFiles>
    <wipeRepoBeforeBuild>true</wipeRepoBeforeBuild>
    <firstChange>0</firstChange>
    <fileLimit>0</fileLimit>
    <excludedFiles>//SPT_HW/legion/sandbox/legion_1x40g/fpga/SourceCode/Warpath_1x40G.v
//SPT_HW/legion/sandbox/legion_1x40g/fpga/SourceCode/include/VERSION_Legion_1x40G.v
//SPT_HW/legion/sandbox/legion_1x40g/fpga/SourceCode/include/VERSION_Warpath_1x40G.v
//SPT_HW/legion/sandbox/legion_1x40g/fpga/SourceCode/include/VERSION_Warpath_1x40G_AN.v
//SPT_HW/legion/sandbox/bitstream/...</excludedFiles>
    <excludedFilesCaseSensitivity>true</excludedFilesCaseSensitivity>
    <slaveClientNameFormat>${basename}-${hash}</slaveClientNameFormat>
    <lineEndValue>local</lineEndValue>
    <useViewMask>true</useViewMask>
    <useViewMaskForPolling>true</useViewMaskForPolling>
    <useViewMaskForSyncing>false</useViewMaskForSyncing>
    <useViewMaskForChangeLog>false</useViewMaskForChangeLog>
    <pollOnlyOnMaster>false</pollOnlyOnMaster>
  </scm>
  <quietPeriod>600</quietPeriod>
  <assignedNode>fpga-imp-02</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <hudson.triggers.SCMTrigger>
      <spec>* * * * *</spec>
      <ignorePostCommitHooks>false</ignorePostCommitHooks>
    </hudson.triggers.SCMTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>ls -al ${WORKSPACE}
p4 have //SPT_HW/legion/sandbox/bitstream/candidate/nic/legion_40g.bit*
ls -al ${WORKSPACE}
mkdir -p ${WORKSPACE}/bitstream/candidate/nic/
ls -al ${WORKSPACE}
p4 sync -f //SPT_HW/legion/sandbox/bitstream/candidate/nic/legion_40g.bit*
ls -al ${WORKSPACE}/bitstream/candidate/nic/

#set up environment
export LM_LICENSE_FILE=${LM_LICENSE_FILE}

source ${XILINX_PATH}/settings64.sh

echo &quot;Derive FPGA image version/datecode&quot;
VER=`printf &quot;%02d&quot; \`expr ${BUILD_NUMBER} % 100\``
DATECODE=`date &quot;+%m%d%y&quot;`
VER_DATECODE=${VER}${DATECODE}

#update version file information
echo &quot;Update VERSION_Legion_1x40G.v&quot;
cd ${WORKSPACE}

p4 edit SourceCode/include/VERSION_Legion_1x40G.v

sed -i &apos;s/^parameter /\/\/parameter /g&apos; SourceCode/include/VERSION_Legion_1x40G.v
sed -i &quot;1i //Includes up to Changelist ${P4_CHANGELIST}&quot; SourceCode/include/VERSION_Legion_1x40G.v
sed -i &quot;2i parameter FPGA_VERSION =  8&apos;h${VER};&quot; SourceCode/include/VERSION_Legion_1x40G.v
sed -i &quot;3i parameter DATE_CODE    =  24&apos;h${DATECODE};&quot; SourceCode/include/VERSION_Legion_1x40G.v
sed -i &quot;4i \ &quot; SourceCode/include/VERSION_Legion_1x40G.v

p4 submit -d &quot;Legion 1x40G NIC version ${VER_DATECODE}.  Includes up to Changelist ${P4_CHANGELIST}&quot; SourceCode/include/VERSION_Legion_1x40G.v

#start implementation
echo &quot;Start implementation&quot;
cd ${WORKSPACE}/Xilinx_Legion_1x40G

echo &quot;${VER_DATECODE}&quot; &gt; ./version_${VER_DATECODE}.txt

#create TCL script for translate process
if [ -f myImp.tcl ];
then
    rm myImp.tcl
fi

echo &quot;project open Legion_1x40G_PCIe2x4.xise&quot; &gt;&gt; myImp.tcl
echo &quot;process run \&quot;Translate\&quot;&quot; &gt;&gt; myImp.tcl

#execute TCL script for translate process
echo &quot;Start translate process&quot;
xtclsh myImp.tcl

#create host list file
if [ -f hosts.txt ];
then
    rm hosts.txt
fi

for (( i=0; i&lt;${MAX_CPU_USAGE}; i++))
do
   echo &quot;localhost&quot; &gt;&gt; hosts.txt
done

#create bitgen options file
if [ -f Legion_1x40G.ut ];
then
    rm Legion_1x40G.ut
fi
echo &quot;-w&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g Binary:no&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g Compress&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g CRC:Enable&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g ConfigRate:22&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g CclkPin:PullUp&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g M0Pin:PullUp&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g M1Pin:PullUp&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g M2Pin:PullUp&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g ProgPin:PullUp&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g InitPin:Pullup&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g TckPin:PullUp&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g TdiPin:PullUp&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g TdoPin:PullUp&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g TmsPin:PullUp&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g Disable_JTAG:No&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g UnusedPin:PullDown&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g UserID:0x${VER_DATECODE}&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g ExtMasterCclk_en:div-1&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g ConfigFallback:Disable&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g BPI_page_size:1&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g BPI_sync_mode:Type2&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g SPI_32bit_addr:No&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g SPI_buswidth:1&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g SPI_Fall_Edge:No&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g OverTempPowerDown:Disable&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g USR_ACCESS:${VER_DATECODE}&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g JTAG_XADC:Enable&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g DCIUpdateMode:AsRequired&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g StartUpClk:CClk&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g DONE_cycle:4&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g GTS_cycle:5&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g GWE_cycle:6&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g Match_cycle:Auto&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g Security:None&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g ICAP_select:Top&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g DonePipe:Yes&quot; &gt;&gt; Legion_1x40G.ut
echo &quot;-g Encrypt:No&quot; &gt;&gt; Legion_1x40G.ut

#launch smartxplorer
echo &quot;Start smartxplorer process&quot;
smartxplorer -p xc7k410t-ffg900-2 -l hosts.txt -b -bo Legion_1x40G.ut -m 12 -max_time &quot;04:00:00&quot; -to &quot;-e 100&quot; -rcmd ssh -uc ./ucf/Legion_1x40G_PCIe2x4.ucf -sd &quot;../SourceCode/CoreGen;../SourceCode/PCIe/CoreGen;../SourceCode/GAFTop40G/Analyzer40G/coregen;../SourceCode/CoreGen/chipscope;../SourceCode/IP_HSEC/20130313&quot; Legion_1x40G.ngd

#check timing score
TIMING_SCORE=`grep &quot;Achieved Timing Score&quot; smartxplorer.log | awk &apos;{print $5}&apos;`
if [ &quot;$TIMING_SCORE&quot; -ne &quot;0&quot; ];
then
    echo &quot;ERROR: Build failed to meet timing (Timing Score = ${TIMING_SCORE})&quot;
    exit 1
fi</command>
    </hudson.tasks.Shell>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$DontRun" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition" plugin="run-condition@1.0">
        <worstResult>
          <name>FAILURE</name>
          <ordinal>2</ordinal>
          <color>RED</color>
          <completeBuild>true</completeBuild>
        </worstResult>
        <bestResult>
          <name>SUCCESS</name>
          <ordinal>0</ordinal>
          <color>BLUE</color>
          <completeBuild>true</completeBuild>
        </bestResult>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>cd Xilinx_Legion_1x40G/
BIT_FILE=`ls ./best_run/*.bit`
if [ ${BIT_FILE} ];
then
    cp ${BIT_FILE} ./legion_40g.bit
    md5sum -b legion_40g.bit &gt; legion_40g.bit.md5
fi</command>
        </hudson.tasks.Shell>
        <org.jenkinsci.plugins.artifactdeployer.ArtifactDeployerBuilder plugin="artifactdeployer@0.28">
          <entry>
            <includes>*.bit*, version_*.txt</includes>
            <basedir>Xilinx_Legion_1x40G</basedir>
            <excludes></excludes>
            <remote>/net/storage_cal_ci/builds/dev/fpga/legion/${JOB_NAME}-${BUILD_NUMBER}</remote>
            <flatten>true</flatten>
            <deleteRemote>false</deleteRemote>
            <deleteRemoteArtifacts>true</deleteRemoteArtifacts>
            <deleteRemoteArtifactsByScript>false</deleteRemoteArtifactsByScript>
            <failNoFilesDeploy>false</failNoFilesDeploy>
          </entry>
        </org.jenkinsci.plugins.artifactdeployer.ArtifactDeployerBuilder>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
    <org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder plugin="conditional-buildstep@1.3.3">
      <runner class="org.jenkins_ci.plugins.run_condition.BuildStepRunner$DontRun" plugin="run-condition@1.0"/>
      <runCondition class="org.jenkins_ci.plugins.run_condition.core.StatusCondition" plugin="run-condition@1.0">
        <worstResult>
          <name>SUCCESS</name>
          <ordinal>0</ordinal>
          <color>BLUE</color>
          <completeBuild>true</completeBuild>
        </worstResult>
        <bestResult>
          <name>SUCCESS</name>
          <ordinal>0</ordinal>
          <color>BLUE</color>
          <completeBuild>true</completeBuild>
        </bestResult>
      </runCondition>
      <conditionalbuilders>
        <hudson.tasks.Shell>
          <command>if [ -f ${WORKSPACE}/Xilinx_Legion_1x40G/legion_40g.bit ];
then

    #submit FPGA image to Perforce
    echo &quot;Submitting FPGA image to Perforce&quot;

    cd ${WORKSPACE}

    p4 have //SPT_HW/legion/sandbox/bitstream/candidate/nic/legion_40g.bit*

    p4 edit //SPT_HW/legion/sandbox/bitstream/candidate/nic/legion_40g.bit*

    cp ${WORKSPACE}/Xilinx_Legion_1x40G/legion_40g.bit* bitstream/candidate/nic/

    VER_DATECODE=`cat Xilinx_Legion_1x40G/version_*.txt`

    p4 submit -d &quot;Legion 1x40G NIC FPGA candidate image, version ${VER_DATECODE}.&quot; //SPT_HW/legion/sandbox/bitstream/candidate/nic/legion_40g.bit*

fi
</command>
        </hudson.tasks.Shell>
      </conditionalbuilders>
    </org.jenkinsci.plugins.conditionalbuildstep.ConditionalBuilder>
  </builders>
  <publishers>
    <hudson.plugins.logparser.LogParserPublisher plugin="log-parser@1.0.8">
      <unstableOnWarning>false</unstableOnWarning>
      <failBuildOnError>true</failBuildOnError>
      <parsingRulesPath>/opt/jenkins/jenkins-root/xilinx_ise_rule</parsingRulesPath>
    </hudson.plugins.logparser.LogParserPublisher>
    <hudson.tasks.ArtifactArchiver>
      <artifacts>Xilinx_Legion_1x40G/*.bit*, Xilinx_Legion_1x40G/version_*.txt</artifacts>
      <latestOnly>true</latestOnly>
      <allowEmptyArchive>false</allowEmptyArchive>
    </hudson.tasks.ArtifactArchiver>
    <hudson.tasks.Fingerprinter>
      <targets></targets>
      <recordBuildArtifacts>true</recordBuildArtifacts>
    </hudson.tasks.Fingerprinter>
    <hudson.plugins.descriptionsetter.DescriptionSetterPublisher plugin="description-setter@1.8">
      <regexp>VER_DATECODE=(.*)</regexp>
      <regexpForFailed></regexpForFailed>
      <description>Version \1</description>
      <setForMatrix>false</setForMatrix>
    </hudson.plugins.descriptionsetter.DescriptionSetterPublisher>
    <hudson.plugins.perforce.PerforceTagNotifier plugin="perforce@1.3.27">
      <rawLabelName>${JOB_NAME}-${BUILD_NUMBER}</rawLabelName>
      <rawLabelOwner></rawLabelOwner>
      <rawLabelDesc>${BUILD_TAG}-${BUILD_NUMBER}</rawLabelDesc>
      <onlyOnSuccess>true</onlyOnSuccess>
    </hudson.plugins.perforce.PerforceTagNotifier>
    <hudson.plugins.emailext.ExtendedEmailPublisher plugin="email-ext@2.37.2">
      <recipientList>$DEFAULT_RECIPIENTS, alex.su@spirent.com</recipientList>
      <configuredTriggers>
        <hudson.plugins.emailext.plugins.trigger.SuccessTrigger>
          <email>
            <recipientList>$DEFAULT_RECIPIENTS;</recipientList>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <sendToDevelopers>true</sendToDevelopers>
            <sendToRequester>false</sendToRequester>
            <includeCulprits>true</includeCulprits>
            <sendToRecipientList>true</sendToRecipientList>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.SuccessTrigger>
        <hudson.plugins.emailext.plugins.trigger.FailureTrigger>
          <email>
            <recipientList>$DEFAULT_RECIPIENTS;</recipientList>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <sendToDevelopers>true</sendToDevelopers>
            <sendToRequester>false</sendToRequester>
            <includeCulprits>true</includeCulprits>
            <sendToRecipientList>true</sendToRecipientList>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FailureTrigger>
        <hudson.plugins.emailext.plugins.trigger.FixedTrigger>
          <email>
            <recipientList>$DEFAULT_RECIPIENTS;</recipientList>
            <subject>$PROJECT_DEFAULT_SUBJECT</subject>
            <body>$PROJECT_DEFAULT_CONTENT</body>
            <sendToDevelopers>true</sendToDevelopers>
            <sendToRequester>false</sendToRequester>
            <includeCulprits>true</includeCulprits>
            <sendToRecipientList>true</sendToRecipientList>
            <attachmentsPattern></attachmentsPattern>
            <attachBuildLog>false</attachBuildLog>
            <compressBuildLog>false</compressBuildLog>
            <replyTo>$PROJECT_DEFAULT_REPLYTO</replyTo>
            <contentType>project</contentType>
          </email>
        </hudson.plugins.emailext.plugins.trigger.FixedTrigger>
      </configuredTriggers>
      <contentType>default</contentType>
      <defaultSubject>$DEFAULT_SUBJECT</defaultSubject>
      <defaultContent>$DEFAULT_CONTENT</defaultContent>
      <attachmentsPattern></attachmentsPattern>
      <presendScript></presendScript>
      <attachBuildLog>false</attachBuildLog>
      <compressBuildLog>false</compressBuildLog>
      <replyTo>$DEFAULT_REPLYTO</replyTo>
      <saveOutput>false</saveOutput>
    </hudson.plugins.emailext.ExtendedEmailPublisher>
    <org.jenkinsci.plugins.postbuildscript.PostBuildScript plugin="postbuildscript@0.16">
      <buildSteps>
        <hudson.tasks.Shell>
          <command>echo &quot;!!! CLEANING OUT WORKSPACE !!!&quot;
rm -rf ${WORKSPACE}/*</command>
        </hudson.tasks.Shell>
      </buildSteps>
      <scriptOnlyIfSuccess>false</scriptOnlyIfSuccess>
      <scriptOnlyIfFailure>false</scriptOnlyIfFailure>
    </org.jenkinsci.plugins.postbuildscript.PostBuildScript>
    <hudson.tasks.Mailer plugin="mailer@1.8">
      <recipients></recipients>
      <dontNotifyEveryUnstableBuild>false</dontNotifyEveryUnstableBuild>
      <sendToIndividuals>true</sendToIndividuals>
    </hudson.tasks.Mailer>
    <hudson.plugins.blame__upstream__commiters.BlameUpstreamCommitersPublisher plugin="blame-upstream-commiters@1.2">
      <sendToIndividuals>false</sendToIndividuals>
    </hudson.plugins.blame__upstream__commiters.BlameUpstreamCommitersPublisher>
  </publishers>
  <buildWrappers>
    <hudson.plugins.timestamper.TimestamperBuildWrapper plugin="timestamper@1.5.8"/>
  </buildWrappers>
</project>